@page "/upload"
@using System.IO
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using System.Collections;
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostEnvironment
@inject AuthenticationStateProvider AuthenticationStateProvider

@using System.Globalization
@using CSRegler.Resources
@using CSRegler.Pages
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http
@inject IStringLocalizer<CSReglerResource> Loc
@inject NotificationService NotificationService
@using Services
@using Models
@inject IWebHostEnvironment Environment
@inject IUploadFileService FileService
<PageTitle>File Upload</PageTitle>



<html>
<head>
<style>
* { box-sizing: border-box; }
 body { font-family: Arial; padding: 10px; background: #f1f1f1; }
/* Header/Blog Title */
.header { padding: 30px;  text-align: center;  background: white;}
.header h1 {  font-size: 50px;}
.vertical-menu {  width: 200px;  height: 500px;  overflow-y: auto;}
.vertical-menu a {   background-color: #eee;  color: black;   display: block;  padding: 5px;  text-decoration: none;}
.vertical-menu a:hover {  background-color: #ccc;}
.vertical-menu a.active {  background-color: #04AA6D;  color: white;}
/* Create two unequal columns that floats next to each other */
/* Left column */
.leftcolumn {     float: left;  width: 25%;}
/* Right column */
.rightcolumn {  float: left;  width: 75%;  background-color: #f1f1f1;  padding-left: 0px;}
/* Fake image */
.fakeimg {  background-color: #aaa;  width: 100%;  padding: 20px;}
/* Add a card effect for articles */
.card {  background-color: white;  padding: 20px;  margin-top: 20px;}
/* Clear floats after the columns */
.row:after {  content: ;  display: table;  clear: both;}
/* Footer */
.footer {  padding: 10px;  text-align: center;  background: #ddd; margin-top: 500px;}

/* Add a black background color to the top navigation */
.topnav {  background-color: #333;  overflow: hidden;}
/* Style the links inside the navigation bar */
.topnav a {  float: left;  color: #f2f2f2;  text-align: center;  padding: 14px 16px;  text-decoration: none;  font-size: 17px;}
/* Change the color of links on hover */
.topnav a:hover {  background-color: #ddd;  color: black;}
/* Add a color to the active/current link */
.topnav a.active {  background-color: #F4AA6A;  color: white;}
button {  background-color: #04AA6D;  color: white;  
padding: 14px 20px;  margin: 8px 0;  border: none;  cursor: pointer;  width: 100%;}
button:hover {  opacity: 0.8;}
</style>
</head>
<body>

<div class='topnav'>
<a href='/'>@Loc["Home"]</a>
<a href='/hardwareconfig'>@Loc["Hardware Configuration"]</a>
<a href='/ioconfig'>@Loc["IO Configuration"]</a>
<a href='/unitconfig'>@Loc["Unit Configuration"]</a>
<a href='/networkconfig'>@Loc["Network Configuration"]</a>
<a href='/administration'>@Loc["Administration"]</a> 
 <a class='active' href='/upload'>@Loc["File Upload"]</a>
</div>

  <div class='row'>
   <div class='leftcolumn' >
     <div class='vertical-menu' >
 <a href='/ae'>@Loc["ae"]</a>
 <a href='/ain'>@Loc["ain"]</a>
 <a href='/aout'>@Loc["aout"]</a>
 <a href='/bmsstop'>@Loc["bmsstop"]</a>
 <a href='/calarm'>@Loc["calarm"]</a>
 <a href='/coil'>@Loc["coil"]</a>
 <a href='/comp'>@Loc["comp"]</a>
 <a href='/cond'>@Loc["cond"]</a>
 <a href='/control'>@Loc["control"]</a>
 <a href='/coolingprio'>@Loc["coolingprio"]</a>
 <a href='/cpset'>@Loc["cpset"]</a>
 <a href='/cw'>@Loc["cw"]</a>
 <a href='/date'>@Loc["date time"]</a>
 <a href='/dehumi'>@Loc["dehumi"]</a>
 <a href='/din'>@Loc["din"]</a>
 <a href='/dout'>@Loc["dout"]</a>
 <a href='/drycool'>@Loc["drycool"]</a>
 <a href='/eco'>@Loc["eco"]</a>
 <a href='/eev'>eev</a>
 <a href='/eheat'>eheat</a>
 <a href='/equipment'>equipment</a>
 <a href='/event'>event</a>
 <a href='/fan'>fan</a>
 <a href='/fcm'>fcm</a>
 <a href='/filter'>filter</a>
 <a href='/fire'>fire</a>
 <a href='/flow'>flow</a>
 <a href='/gasheat'>gasheat</a>
 <a href='/gecwv'>gecwv</a>
 <a href='/gvalve'>gvalve</a>
 <a href='/hgbp'>hgbp</a>
 <a href='/humi'>humi</a>
 <a href='/iobus'>iobus</a>
 <a href='/is'>is</a>
 <a href='/loaddefault'>loaddefault</a>
 <a href='/log'>log</a>
 <a href='/louver'>louver</a>
 <a href='/minmax'>minmax</a>
 <a href='/option'>option</a>
 <a href='/phase'>phase</a>
 <a href='/protocol'>protocol</a>
 <a href='/pszone'>pszone</a>
 <a href='/pump'>pump</a>
 <a href='/pwwheat'>pwwheat</a>
 <a href='/sensor'>sensor</a>
 <a href='/setpoint'>setpoint</a>
 <a href='/state'>state</a>
 <a href='/suctionv'>suctionv</a>
 <a href='/ups'>ups</a>
 <a href='/water'>water</a>
 <a href='/winter'>winter</a>
 <a href='/wprg'>wprg</a>
 <a href='/zone'>zone</a>
 	</div>
   </div>

 <div class='rightcolumn'>
 <div class="container">
    <div class="row">
        <div class="col-md-12">
           <div class="card">
                <div class="card-header">
                    <span>Please Select File of this format and size :
                    @foreach (var item in AcceptedFileTypes)
                    {
                        <span class="badge bg-success m-1">@item</span>
                        
                    }
                    </span>
                    <span class="badge bg-success">File Size : @AcceptedMaxFileSize Bytes</span>
                </div>
                <div class="card-body">

                    <InputFile OnChange="@HandelFileChange" class="form-control" aria-label="Select File"></InputFile>
                    <br />
                    @if(SelectedFileNotification)
                    {
                        <div class="@AlertCssClass" role="alert">
                            @foreach (var item in SelectedFileDetails)
                            {
                                <p>@item</p>
                                
                            }

                        </div>
                    }
                    @if(ShowUploadBtn)
                    {
                        <button @onclick="@(async ()=>await HandelUpload())" class="btn btn-success">Upload SelectedFile</button>

                    }

                </div>
            </div>
           @* Table to Show Uploaded Files*@
           <div class="card">
               <div class="card-header">
                   <h3>Uploaded Files Table</h3>

               </div>
               <div class="card-body">

                   <table class="table table-bordered">
                       <thead>
                           <tr>
                               <th>#</th>
                               <th>File Name</th>
                               <th>Sile Size</th>
                               <th>File Format</th>
                               <th>Image</th>
                           </tr>
                       </thead>
                       <tbody>
                           @foreach (var item in uplodedFileModels)
                           {
                                if (item.Equals(uplodedFileModels.Last()))
                                   {                                            
                                   <tr>
                                   <td>@item.Id</td>
                                   <td>@item.FileName</td>
                                   <td>@item.FileSize</td>
                                   <td>@item.FileType</td>
                                   <td>
                                   <img src=@item.FileUrl class="img-thumbnail" width="100" height="100">
                                   </td>
                                   </tr>
                               }
                              
                           }
                       </tbody>
                   </table>

               </div>
           </div>
        </div>
    </div>
</div>

 </div>
 </div>

 </body>
</html>
@inject IJSRuntime JsRuntime

@code
{
    bool SelectedFileNotification = false;
    bool ShowUploadBtn = false;
    int AcceptedMaxFileSize = 3000000;
    List<string> AcceptedFileTypes = new List<string> { "image/jpg", "image/jpeg", "image/png" };
    List<string> SelectedFileDetails = new List<string>();
    string NewFileName = string.Empty;
    string AlertCssClass = string.Empty;

    IBrowserFile UploadedFile;
    string PathToUpload = string.Empty;

    //crate a list of model
    List<UplodedFileModel> uplodedFileModels = new List<UplodedFileModel>();

    private async Task HandelFileChange(InputFileChangeEventArgs e)
    {
        UploadedFile = e.File;
        var selectedFileType = UploadedFile.ContentType;
        SelectedFileNotification = false;
        SelectedFileDetails = new List<string>();

        //Check File Size And File Format
        if(!AcceptedFileTypes.Any(t=>t.Equals(selectedFileType)))
        {
            //Set Message For File Type
            AlertCssClass = "alert alert-danger";
            SelectedFileDetails.Add("File Type is not Acceptable!");
            SelectedFileNotification = true;
            ShowUploadBtn = false;
            return;
        }
        //check file size
        var selectedFileSize = UploadedFile.Size;
        if(selectedFileSize>AcceptedMaxFileSize)
        {
            AlertCssClass = "alert alert-danger";
            SelectedFileDetails.Add($"the selected file size is larger than the allowed value {AcceptedMaxFileSize}");
            SelectedFileNotification = true;
            ShowUploadBtn = false;
            return;
        }
        //If everything is ok ,change the file name to avoid overwrite
        var FileExtension = Path.GetExtension(UploadedFile.Name);
        NewFileName = Guid.NewGuid().ToString() + FileExtension;

        //Place File In IBrowseFile

        PathToUpload = Path.Combine(Environment.WebRootPath, "img", NewFileName);

        SelectedFileNotification = true;
        ShowUploadBtn = true;
        AlertCssClass = "alert alert-success";
        SelectedFileDetails.Add("File Size : " + selectedFileSize.ToString());
        SelectedFileDetails.Add("File Type :" + selectedFileType);
        SelectedFileDetails.Add("New File Name : " + NewFileName);



    }
    private async Task HandelUpload()
    {
        //here we upload the selected file to server
        await using FileStream fs = new(PathToUpload, FileMode.Create);
        await UploadedFile.OpenReadStream(AcceptedMaxFileSize).CopyToAsync(fs);

        //Lets Create A model and save file data in it
        UplodedFileModel model = new UplodedFileModel()
            {
                FileName = NewFileName,
                FileSize = UploadedFile.Size,
                FileType = UploadedFile.ContentType,
                FileUrl = "img/" + NewFileName
            };

        await FileService.AddNewFileAsync(model);

        //clear the notification Messages
        SelectedFileDetails = new List<string>();
        //add new message to show to user
        SelectedFileDetails.Add("The File Uploaded Successfully / please refesh the webpage");
        SelectedFileNotification = true;
        //hide upload btn 
        ShowUploadBtn = false;
        AlertCssClass = "alert alert-success";
        //Pupulate Data After Insert
        await LoadFilesToTable();


    }
    //lets Create a table to show uploaded file detail
    //fill the model list from database using service
    private async Task LoadFilesToTable()
    {
        uplodedFileModels = await FileService.GetAllFilesAsync();
    }
    //call LoadFiletotable method in page init
    protected override async Task OnInitializedAsync()
    {
        await LoadFilesToTable();

    }

}
